/*! LoginSiteTemplate-Node-Angular-Postgres-FoundationCSS 2016-03-24 */
var nodeJSWebApp=angular.module("nodeJSWebApp",["mm.foundation","indexController","userControllers","menuControllers","navigationController"]);nodeJSWebApp.config(["$routeProvider","$httpProvider",function($routeProvider,$httpProvider){$httpProvider.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",$httpProvider.defaults.transformRequest.unshift(function(data,headersGetter){var key,result=[];for(key in data)data.hasOwnProperty(key)&&("undefined"==typeof data[key]&&(data[key]=""),result.push(encodeURIComponent(key)+"="+encodeURIComponent(data[key])));return result.join("&")})}]);var indexController=angular.module("indexController",[]);indexController.controller("indexController",["$scope","$http",function($scope,$http){}]);var menuControllers=angular.module("menuControllers",[]);menuControllers.controller("menuController",["$scope","$http",function($scope,$http){}]);var userControllers=angular.module("userControllers",[]);userControllers.controller("loginController",["$scope","$http",function($scope,$http){$scope.showValidationMessages=!1,$scope.userNotFound=!1,$scope.submit=function(isFormValid){$scope.showValidationMessages=!0,isFormValid&&$http({url:"/user/checkLogin",method:"POST",data:{username:$scope.username,password:$scope.password}}).then(function(response){return $scope.userNotFound=!1,"user login sucessful"!=response.data?void($scope.userNotFound=!0):void(window.location="/user/account")},function(response){isFormValid=!1})}}]),userControllers.controller("signupController",["$scope","$http",function($scope,$http){$scope.showValidationMessages=!1,$scope.passwordMatch=!0,$scope.submit=function(isFormValid){if($scope.showValidationMessages=!0,$scope.passwordMatch=!0,$scope.password!=$scope.confirm&&($scope.passwordMatch=!1,isFormValid=!1),isFormValid){$scope.showEmailTakenError=!1,$scope.showUserTakenError=!1;var values={email:$scope.email,username:$scope.username};angular.forEach(values,function(value,key){$http({url:"/user/checkExistingValue",method:"POST",data:{property:key,value:value}}).then(function(response){"value exists"==response.data&&("email"==key?$scope.showEmailTakenError=!0:$scope.showUserTakenError=!0,isFormValid=!1),"username"==key&&isFormValid&&document.forms.signupform.submit()},function(response){isFormValid=!1})})}}}]),userControllers.controller("userAccountController",["$scope","$http",function($scope,$http){$scope.showAccountForm=!1,$scope.showValidationMessages=!1,$scope.fullname=window.fullname,$scope.showUpdateMessage=!1,$scope.updateMessage="",$scope.submit=function(isFormValid){$scope.showValidationMessages=!0,$scope.passwordMatch=!0,$scope.password!=$scope.confirm&&($scope.passwordMatch=!1,isFormValid=!1),isFormValid&&($scope.showUpdateMessage=!1,$scope.updateMessage="",$http({url:"/user/update",method:"POST",data:{fullname:$scope.fullname,password:$scope.password}}).then(function(response){$scope.showUpdateMessage=!0,$scope.updateMessage=response.data,$scope.showAccountForm=!1}))}}]),userControllers.controller("forgotController",["$scope","$http",function($scope,$http){$scope.showValidationMessages=!1,$scope.userNotFound=!1,$scope.passwordReset=!1,$scope.submit=function(isFormValid){$scope.showValidationMessages=!0,$scope.userNotFound=!1,"undefined"!=typeof $scope.username&&""!=$scope.username||"undefined"!=typeof $scope.email&&""!=$scope.email||($scope.userNotFound=!0,isFormValid=!1),isFormValid&&$http({url:"/user/checkForgot",method:"POST",data:{username:$scope.username,email:$scope.email}}).then(function(response){"user password recovered"==response.data?$scope.passwordReset=!0:$scope.userNotFound=!0})}}]);var navigationController=angular.module("navigationController",[]);navigationController.controller("navigationController",["$scope","$http",function($scope,$http){}]),nodeJSWebApp.directive("scroll",function($window){return function(scope,element,attrs){angular.element($window).bind("scroll",function(){this.pageYOffset>=100?element.addClass("scrolled"):element.removeClass("scrolled")})}});